{
    "invariants": [
        {
            "vulnerability": "Re-entrancy",
            "expression": "userBalance[msg.sender] == 0 after withdrawal",
            "description": "Ensure that after a withdrawal, the user's balance is set to zero to prevent further withdrawals.",
            "security_relevance": "high"
        },
        {
            "vulnerability": "Re-entrancy",
            "expression": "msg.sender != contract || !msg.sender.call.value(amount)()",
            "description": "Validate that either the sender is not a contract or that no re-entrant call is made within the withdraw function.",
            "security_relevance": "high"
        },
        {
            "vulnerability": "Access Control",
            "expression": "msg.sender == tx.origin",
            "description": "Require that the caller is an externally owned account (EOA) to prevent indirect calls from other contracts.",
            "security_relevance": "medium"
        },
        {
            "vulnerability": "Data Consistency",
            "expression": "userBalance[u] >= 0 for all u",
            "description": "Ensure that the user balances do not go negative under any condition.",
            "security_relevance": "medium"
        },
        {
            "vulnerability": "Money Flow",
            "expression": "totalUserBalance â‰¤ contractBalance",
            "description": "Total of all user balances should not exceed the contract's actual balance to prevent overdraws.",
            "security_relevance": "high"
        }
    ]
}
