{
  "invariants": [
    {
      "category": "Access Control",
      "invariant": "msg.sender == tx.origin",
      "security_relevance": "Medium",
      "description": "Ensures that the transaction initiator is the same as the message sender, preventing impersonation through contract calls."
    },
    {
      "category": "Re-entrancy",
      "invariant": "userBalances[msg.sender] >= amountToWithdraw",
      "security_relevance": "High",
      "description": "Confirms that the user has sufficient balance before executing the withdrawal, mitigating the re-entrancy risk by allowing balance checks."
    },
    {
      "category": "Re-entrancy",
      "invariant": "userBalances[msg.sender] = 0 after msg.sender.call",
      "security_relevance": "High",
      "description": "Sets user balance to zero immediately after the external call to prevent multiple withdrawals due to re-entrancy."
    },
    {
      "category": "Data Flow & Business Logic",
      "invariant": "userBalances[to] += amount if userBalances[msg.sender] >= amount",
      "security_relevance": "Medium",
      "description": "Ensures balance transfer logic is applied correctly when balance is sufficient, maintaining data integrity."
    },
    {
      "category": "Gas Control",
      "invariant": "gasUsed(withdrawBalance) â‰¤ maxGasLimit",
      "security_relevance": "Low",
      "description": "Ensures gas cost remains within a limit to prevent accidental denial of service due to excessive gas usage."
    }
  ]
}
